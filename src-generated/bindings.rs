/* automatically generated by rust-bindgen */

use libc::FILE;

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
extern "C" {
    pub fn yaml_get_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn yaml_get_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        patch: *mut ::std::os::raw::c_int,
    );
}
pub type yaml_char_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_version_directive_s {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_version_directive_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_version_directive_s>(),
        8usize,
        concat!("Size of: ", stringify!(yaml_version_directive_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_version_directive_s>(),
        4usize,
        concat!("Alignment of ", stringify!(yaml_version_directive_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_version_directive_s>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_version_directive_s),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_version_directive_s>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_version_directive_s),
            "::",
            stringify!(minor)
        )
    );
}
pub type yaml_version_directive_t = yaml_version_directive_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_tag_directive_s {
    pub handle: *mut yaml_char_t,
    pub prefix: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_tag_directive_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_tag_directive_s>(),
        16usize,
        concat!("Size of: ", stringify!(yaml_tag_directive_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_tag_directive_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_tag_directive_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_tag_directive_s>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_tag_directive_s),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_tag_directive_s>())).prefix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_tag_directive_s),
            "::",
            stringify!(prefix)
        )
    );
}
pub type yaml_tag_directive_t = yaml_tag_directive_s;
pub const YAML_ANY_ENCODING: yaml_encoding_e = 0;
pub const YAML_UTF8_ENCODING: yaml_encoding_e = 1;
pub const YAML_UTF16LE_ENCODING: yaml_encoding_e = 2;
pub const YAML_UTF16BE_ENCODING: yaml_encoding_e = 3;
pub type yaml_encoding_e = i32;
pub use self::yaml_encoding_e as yaml_encoding_t;
pub const YAML_ANY_BREAK: yaml_break_e = 0;
pub const YAML_CR_BREAK: yaml_break_e = 1;
pub const YAML_LN_BREAK: yaml_break_e = 2;
pub const YAML_CRLN_BREAK: yaml_break_e = 3;
pub type yaml_break_e = i32;
pub use self::yaml_break_e as yaml_break_t;
pub const YAML_NO_ERROR: yaml_error_type_e = 0;
pub const YAML_MEMORY_ERROR: yaml_error_type_e = 1;
pub const YAML_READER_ERROR: yaml_error_type_e = 2;
pub const YAML_SCANNER_ERROR: yaml_error_type_e = 3;
pub const YAML_PARSER_ERROR: yaml_error_type_e = 4;
pub const YAML_COMPOSER_ERROR: yaml_error_type_e = 5;
pub const YAML_WRITER_ERROR: yaml_error_type_e = 6;
pub const YAML_EMITTER_ERROR: yaml_error_type_e = 7;
pub type yaml_error_type_e = i32;
pub use self::yaml_error_type_e as yaml_error_type_t;
#[repr(C)]
pub struct yaml_mark_s {
    pub index: usize,
    pub line: usize,
    pub column: usize,
}
#[test]
fn bindgen_test_layout_yaml_mark_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_mark_s>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_mark_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_mark_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_mark_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_mark_s>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_mark_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_mark_s>())).line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_mark_s),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_mark_s>())).column as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_mark_s),
            "::",
            stringify!(column)
        )
    );
}
pub type yaml_mark_t = yaml_mark_s;
pub const YAML_ANY_SCALAR_STYLE: yaml_scalar_style_e = 0;
pub const YAML_PLAIN_SCALAR_STYLE: yaml_scalar_style_e = 1;
pub const YAML_SINGLE_QUOTED_SCALAR_STYLE: yaml_scalar_style_e = 2;
pub const YAML_DOUBLE_QUOTED_SCALAR_STYLE: yaml_scalar_style_e = 3;
pub const YAML_LITERAL_SCALAR_STYLE: yaml_scalar_style_e = 4;
pub const YAML_FOLDED_SCALAR_STYLE: yaml_scalar_style_e = 5;
pub type yaml_scalar_style_e = i32;
pub use self::yaml_scalar_style_e as yaml_scalar_style_t;
pub const YAML_ANY_SEQUENCE_STYLE: yaml_sequence_style_e = 0;
pub const YAML_BLOCK_SEQUENCE_STYLE: yaml_sequence_style_e = 1;
pub const YAML_FLOW_SEQUENCE_STYLE: yaml_sequence_style_e = 2;
pub type yaml_sequence_style_e = i32;
pub use self::yaml_sequence_style_e as yaml_sequence_style_t;
pub const YAML_ANY_MAPPING_STYLE: yaml_mapping_style_e = 0;
pub const YAML_BLOCK_MAPPING_STYLE: yaml_mapping_style_e = 1;
pub const YAML_FLOW_MAPPING_STYLE: yaml_mapping_style_e = 2;
pub type yaml_mapping_style_e = i32;
pub use self::yaml_mapping_style_e as yaml_mapping_style_t;
pub const YAML_NO_TOKEN: yaml_token_type_e = 0;
pub const YAML_STREAM_START_TOKEN: yaml_token_type_e = 1;
pub const YAML_STREAM_END_TOKEN: yaml_token_type_e = 2;
pub const YAML_VERSION_DIRECTIVE_TOKEN: yaml_token_type_e = 3;
pub const YAML_TAG_DIRECTIVE_TOKEN: yaml_token_type_e = 4;
pub const YAML_DOCUMENT_START_TOKEN: yaml_token_type_e = 5;
pub const YAML_DOCUMENT_END_TOKEN: yaml_token_type_e = 6;
pub const YAML_BLOCK_SEQUENCE_START_TOKEN: yaml_token_type_e = 7;
pub const YAML_BLOCK_MAPPING_START_TOKEN: yaml_token_type_e = 8;
pub const YAML_BLOCK_END_TOKEN: yaml_token_type_e = 9;
pub const YAML_FLOW_SEQUENCE_START_TOKEN: yaml_token_type_e = 10;
pub const YAML_FLOW_SEQUENCE_END_TOKEN: yaml_token_type_e = 11;
pub const YAML_FLOW_MAPPING_START_TOKEN: yaml_token_type_e = 12;
pub const YAML_FLOW_MAPPING_END_TOKEN: yaml_token_type_e = 13;
pub const YAML_BLOCK_ENTRY_TOKEN: yaml_token_type_e = 14;
pub const YAML_FLOW_ENTRY_TOKEN: yaml_token_type_e = 15;
pub const YAML_KEY_TOKEN: yaml_token_type_e = 16;
pub const YAML_VALUE_TOKEN: yaml_token_type_e = 17;
pub const YAML_ALIAS_TOKEN: yaml_token_type_e = 18;
pub const YAML_ANCHOR_TOKEN: yaml_token_type_e = 19;
pub const YAML_TAG_TOKEN: yaml_token_type_e = 20;
pub const YAML_SCALAR_TOKEN: yaml_token_type_e = 21;
pub type yaml_token_type_e = i32;
pub use self::yaml_token_type_e as yaml_token_type_t;
#[repr(C)]
pub struct yaml_token_s {
    pub type_: yaml_token_type_t,
    pub data: yaml_token_s__bindgen_ty_1,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
#[repr(C)]
pub struct yaml_token_s__bindgen_ty_1 {
    pub stream_start: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_1>,
    pub alias: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_2>,
    pub anchor: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_3>,
    pub tag: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_4>,
    pub scalar: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_5>,
    pub version_directive: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_6>,
    pub tag_directive: __BindgenUnionField<yaml_token_s__bindgen_ty_1__bindgen_ty_7>,
    pub bindgen_union_field: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_1 {
    pub encoding: yaml_encoding_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_1>())).encoding
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(encoding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_2 {
    pub value: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_2>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_3 {
    pub value: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_3>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_4 {
    pub handle: *mut yaml_char_t,
    pub suffix: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_4>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_4>())).suffix as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(suffix)
        )
    );
}
#[repr(C)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_5 {
    pub value: *mut yaml_char_t,
    pub length: usize,
    pub style: yaml_scalar_style_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_5>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_5>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_5>())).length as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_5>())).style as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(style)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_6 {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_6>())).major as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_6>())).minor as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_7 {
    pub handle: *mut yaml_char_t,
    pub prefix: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_7>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1__bindgen_ty_7>())).prefix as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(prefix)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_token_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_token_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_token_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).stream_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(stream_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).alias as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).anchor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).scalar as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).version_directive as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(version_directive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_token_s__bindgen_ty_1>())).tag_directive as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s__bindgen_ty_1),
            "::",
            stringify!(tag_directive)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_token_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_token_s>(),
        80usize,
        concat!("Size of: ", stringify!(yaml_token_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_token_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_token_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_token_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_token_s>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_token_s>())).start_mark as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s),
            "::",
            stringify!(start_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_token_s>())).end_mark as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_token_s),
            "::",
            stringify!(end_mark)
        )
    );
}
pub type yaml_token_t = yaml_token_s;
extern "C" {
    pub fn yaml_token_delete(token: *mut yaml_token_t);
}
pub const YAML_NO_EVENT: yaml_event_type_e = 0;
pub const YAML_STREAM_START_EVENT: yaml_event_type_e = 1;
pub const YAML_STREAM_END_EVENT: yaml_event_type_e = 2;
pub const YAML_DOCUMENT_START_EVENT: yaml_event_type_e = 3;
pub const YAML_DOCUMENT_END_EVENT: yaml_event_type_e = 4;
pub const YAML_ALIAS_EVENT: yaml_event_type_e = 5;
pub const YAML_SCALAR_EVENT: yaml_event_type_e = 6;
pub const YAML_SEQUENCE_START_EVENT: yaml_event_type_e = 7;
pub const YAML_SEQUENCE_END_EVENT: yaml_event_type_e = 8;
pub const YAML_MAPPING_START_EVENT: yaml_event_type_e = 9;
pub const YAML_MAPPING_END_EVENT: yaml_event_type_e = 10;
pub type yaml_event_type_e = i32;
pub use self::yaml_event_type_e as yaml_event_type_t;
#[repr(C)]
pub struct yaml_event_s {
    pub type_: yaml_event_type_t,
    pub data: yaml_event_s__bindgen_ty_1,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
#[repr(C)]
pub struct yaml_event_s__bindgen_ty_1 {
    pub stream_start: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_1>,
    pub document_start: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_2>,
    pub document_end: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_3>,
    pub alias: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_4>,
    pub scalar: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_5>,
    pub sequence_start: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_6>,
    pub mapping_start: __BindgenUnionField<yaml_event_s__bindgen_ty_1__bindgen_ty_7>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_1 {
    pub encoding: yaml_encoding_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_1>())).encoding
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(encoding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_2 {
    pub version_directive: *mut yaml_version_directive_t,
    pub tag_directives: yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub implicit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).end
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(end)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_2>())).version_directive
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(version_directive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_2>())).tag_directives
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(tag_directives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_2>())).implicit
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(implicit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_3 {
    pub implicit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_3>())).implicit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(implicit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_4 {
    pub anchor: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_4>())).anchor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(anchor)
        )
    );
}
#[repr(C)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_5 {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub value: *mut yaml_char_t,
    pub length: usize,
    pub plain_implicit: ::std::os::raw::c_int,
    pub quoted_implicit: ::std::os::raw::c_int,
    pub style: yaml_scalar_style_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).anchor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).tag as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).value as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).length as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).plain_implicit
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(plain_implicit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).quoted_implicit
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(quoted_implicit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_5>())).style as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(style)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_6 {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub implicit: ::std::os::raw::c_int,
    pub style: yaml_sequence_style_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>())).anchor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>())).tag as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>())).implicit
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(implicit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_6>())).style as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(style)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_7 {
    pub anchor: *mut yaml_char_t,
    pub tag: *mut yaml_char_t,
    pub implicit: ::std::os::raw::c_int,
    pub style: yaml_mapping_style_t,
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>())).anchor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>())).tag as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>())).implicit
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(implicit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1__bindgen_ty_7>())).style as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(style)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_event_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(yaml_event_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_event_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).stream_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(stream_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).document_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(document_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).document_end as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(document_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).alias as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).scalar as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).sequence_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(sequence_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_event_s__bindgen_ty_1>())).mapping_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s__bindgen_ty_1),
            "::",
            stringify!(mapping_start)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_event_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_event_s>(),
        104usize,
        concat!("Size of: ", stringify!(yaml_event_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_event_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_event_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_event_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_event_s>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_event_s>())).start_mark as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s),
            "::",
            stringify!(start_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_event_s>())).end_mark as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_event_s),
            "::",
            stringify!(end_mark)
        )
    );
}
pub type yaml_event_t = yaml_event_s;
extern "C" {
    pub fn yaml_stream_start_event_initialize(
        event: *mut yaml_event_t,
        encoding: yaml_encoding_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_stream_end_event_initialize(event: *mut yaml_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_start_event_initialize(
        event: *mut yaml_event_t,
        version_directive: *mut yaml_version_directive_t,
        tag_directives_start: *mut yaml_tag_directive_t,
        tag_directives_end: *mut yaml_tag_directive_t,
        implicit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_end_event_initialize(
        event: *mut yaml_event_t,
        implicit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_alias_event_initialize(
        event: *mut yaml_event_t,
        anchor: *mut yaml_char_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_scalar_event_initialize(
        event: *mut yaml_event_t,
        anchor: *mut yaml_char_t,
        tag: *mut yaml_char_t,
        value: *mut yaml_char_t,
        length: ::std::os::raw::c_int,
        plain_implicit: ::std::os::raw::c_int,
        quoted_implicit: ::std::os::raw::c_int,
        style: yaml_scalar_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_sequence_start_event_initialize(
        event: *mut yaml_event_t,
        anchor: *mut yaml_char_t,
        tag: *mut yaml_char_t,
        implicit: ::std::os::raw::c_int,
        style: yaml_sequence_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_sequence_end_event_initialize(event: *mut yaml_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_mapping_start_event_initialize(
        event: *mut yaml_event_t,
        anchor: *mut yaml_char_t,
        tag: *mut yaml_char_t,
        implicit: ::std::os::raw::c_int,
        style: yaml_mapping_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_mapping_end_event_initialize(event: *mut yaml_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_event_delete(event: *mut yaml_event_t);
}
pub const YAML_NO_NODE: yaml_node_type_e = 0;
pub const YAML_SCALAR_NODE: yaml_node_type_e = 1;
pub const YAML_SEQUENCE_NODE: yaml_node_type_e = 2;
pub const YAML_MAPPING_NODE: yaml_node_type_e = 3;
pub type yaml_node_type_e = i32;
pub use self::yaml_node_type_e as yaml_node_type_t;
pub type yaml_node_t = yaml_node_s;
pub type yaml_node_item_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_pair_s {
    pub key: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_node_pair_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_pair_s>(),
        8usize,
        concat!("Size of: ", stringify!(yaml_node_pair_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_pair_s>(),
        4usize,
        concat!("Alignment of ", stringify!(yaml_node_pair_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_pair_s>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_pair_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_pair_s>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_pair_s),
            "::",
            stringify!(value)
        )
    );
}
pub type yaml_node_pair_t = yaml_node_pair_s;
#[repr(C)]
pub struct yaml_node_s {
    pub type_: yaml_node_type_t,
    pub tag: *mut yaml_char_t,
    pub data: yaml_node_s__bindgen_ty_1,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
#[repr(C)]
pub struct yaml_node_s__bindgen_ty_1 {
    pub scalar: __BindgenUnionField<yaml_node_s__bindgen_ty_1__bindgen_ty_1>,
    pub sequence: __BindgenUnionField<yaml_node_s__bindgen_ty_1__bindgen_ty_2>,
    pub mapping: __BindgenUnionField<yaml_node_s__bindgen_ty_1__bindgen_ty_3>,
    pub bindgen_union_field: [u64; 4usize],
}
#[repr(C)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_1 {
    pub value: *mut yaml_char_t,
    pub length: usize,
    pub style: yaml_scalar_style_t,
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_1>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_1>())).length as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_1>())).style as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(style)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_2 {
    pub items: yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub style: yaml_sequence_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub start: *mut yaml_node_item_t,
    pub end: *mut yaml_node_item_t,
    pub top: *mut yaml_node_item_t,
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).end
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>())).top
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(top)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_2>())).items as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_2>())).style as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(style)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_3 {
    pub pairs: yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub style: yaml_mapping_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
    pub start: *mut yaml_node_pair_t,
    pub end: *mut yaml_node_pair_t,
    pub top: *mut yaml_node_pair_t,
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>())).end
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1>())).top
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(top)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_3>())).pairs as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(pairs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1__bindgen_ty_3>())).style as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(style)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_node_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_node_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_node_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1>())).scalar as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1>())).sequence as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_node_s__bindgen_ty_1>())).mapping as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s__bindgen_ty_1),
            "::",
            stringify!(mapping)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_node_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_node_s>(),
        96usize,
        concat!("Size of: ", stringify!(yaml_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_node_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_s>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_s>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_s>())).start_mark as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s),
            "::",
            stringify!(start_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_node_s>())).end_mark as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_node_s),
            "::",
            stringify!(end_mark)
        )
    );
}
#[repr(C)]
pub struct yaml_document_s {
    pub nodes: yaml_document_s__bindgen_ty_1,
    pub version_directive: *mut yaml_version_directive_t,
    pub tag_directives: yaml_document_s__bindgen_ty_2,
    pub start_implicit: ::std::os::raw::c_int,
    pub end_implicit: ::std::os::raw::c_int,
    pub start_mark: yaml_mark_t,
    pub end_mark: yaml_mark_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_document_s__bindgen_ty_1 {
    pub start: *mut yaml_node_t,
    pub end: *mut yaml_node_t,
    pub top: *mut yaml_node_t,
}
#[test]
fn bindgen_test_layout_yaml_document_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_document_s__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_document_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_document_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_document_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s__bindgen_ty_1>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s__bindgen_ty_1>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s__bindgen_ty_1),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s__bindgen_ty_1>())).top as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s__bindgen_ty_1),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_document_s__bindgen_ty_2 {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
}
#[test]
fn bindgen_test_layout_yaml_document_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_document_s__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(yaml_document_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_document_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_document_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s__bindgen_ty_2>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s__bindgen_ty_2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s__bindgen_ty_2>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_document_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_document_s>(),
        104usize,
        concat!("Size of: ", stringify!(yaml_document_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_document_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_document_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_document_s>())).version_directive as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(version_directive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).tag_directives as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(tag_directives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).start_implicit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(start_implicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).end_implicit as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(end_implicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).start_mark as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(start_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_document_s>())).end_mark as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_document_s),
            "::",
            stringify!(end_mark)
        )
    );
}
pub type yaml_document_t = yaml_document_s;
extern "C" {
    pub fn yaml_document_initialize(
        document: *mut yaml_document_t,
        version_directive: *mut yaml_version_directive_t,
        tag_directives_start: *mut yaml_tag_directive_t,
        tag_directives_end: *mut yaml_tag_directive_t,
        start_implicit: ::std::os::raw::c_int,
        end_implicit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_delete(document: *mut yaml_document_t);
}
extern "C" {
    pub fn yaml_document_get_node(
        document: *mut yaml_document_t,
        index: ::std::os::raw::c_int,
    ) -> *mut yaml_node_t;
}
extern "C" {
    pub fn yaml_document_get_root_node(document: *mut yaml_document_t) -> *mut yaml_node_t;
}
extern "C" {
    pub fn yaml_document_add_scalar(
        document: *mut yaml_document_t,
        tag: *mut yaml_char_t,
        value: *mut yaml_char_t,
        length: ::std::os::raw::c_int,
        style: yaml_scalar_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_add_sequence(
        document: *mut yaml_document_t,
        tag: *mut yaml_char_t,
        style: yaml_sequence_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_add_mapping(
        document: *mut yaml_document_t,
        tag: *mut yaml_char_t,
        style: yaml_mapping_style_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_append_sequence_item(
        document: *mut yaml_document_t,
        sequence: ::std::os::raw::c_int,
        item: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_document_append_mapping_pair(
        document: *mut yaml_document_t,
        mapping: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type yaml_read_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_uchar,
        size: usize,
        size_read: *mut usize,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
pub struct yaml_simple_key_s {
    pub possible: ::std::os::raw::c_int,
    pub required: ::std::os::raw::c_int,
    pub token_number: usize,
    pub mark: yaml_mark_t,
}
#[test]
fn bindgen_test_layout_yaml_simple_key_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_simple_key_s>(),
        40usize,
        concat!("Size of: ", stringify!(yaml_simple_key_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_simple_key_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_simple_key_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_simple_key_s>())).possible as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_simple_key_s),
            "::",
            stringify!(possible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_simple_key_s>())).required as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_simple_key_s),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_simple_key_s>())).token_number as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_simple_key_s),
            "::",
            stringify!(token_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_simple_key_s>())).mark as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_simple_key_s),
            "::",
            stringify!(mark)
        )
    );
}
pub type yaml_simple_key_t = yaml_simple_key_s;
pub const YAML_PARSE_STREAM_START_STATE: yaml_parser_state_e = 0;
pub const YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE: yaml_parser_state_e = 1;
pub const YAML_PARSE_DOCUMENT_START_STATE: yaml_parser_state_e = 2;
pub const YAML_PARSE_DOCUMENT_CONTENT_STATE: yaml_parser_state_e = 3;
pub const YAML_PARSE_DOCUMENT_END_STATE: yaml_parser_state_e = 4;
pub const YAML_PARSE_BLOCK_NODE_STATE: yaml_parser_state_e = 5;
pub const YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE: yaml_parser_state_e = 6;
pub const YAML_PARSE_FLOW_NODE_STATE: yaml_parser_state_e = 7;
pub const YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE: yaml_parser_state_e = 8;
pub const YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE: yaml_parser_state_e = 9;
pub const YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE: yaml_parser_state_e = 10;
pub const YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE: yaml_parser_state_e = 11;
pub const YAML_PARSE_BLOCK_MAPPING_KEY_STATE: yaml_parser_state_e = 12;
pub const YAML_PARSE_BLOCK_MAPPING_VALUE_STATE: yaml_parser_state_e = 13;
pub const YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE: yaml_parser_state_e = 14;
pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE: yaml_parser_state_e = 15;
pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE: yaml_parser_state_e = 16;
pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE: yaml_parser_state_e = 17;
pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE: yaml_parser_state_e = 18;
pub const YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE: yaml_parser_state_e = 19;
pub const YAML_PARSE_FLOW_MAPPING_KEY_STATE: yaml_parser_state_e = 20;
pub const YAML_PARSE_FLOW_MAPPING_VALUE_STATE: yaml_parser_state_e = 21;
pub const YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE: yaml_parser_state_e = 22;
pub const YAML_PARSE_END_STATE: yaml_parser_state_e = 23;
pub type yaml_parser_state_e = i32;
pub use self::yaml_parser_state_e as yaml_parser_state_t;
#[repr(C)]
pub struct yaml_alias_data_s {
    pub anchor: *mut yaml_char_t,
    pub index: ::std::os::raw::c_int,
    pub mark: yaml_mark_t,
}
#[test]
fn bindgen_test_layout_yaml_alias_data_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_alias_data_s>(),
        40usize,
        concat!("Size of: ", stringify!(yaml_alias_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_alias_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_alias_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_alias_data_s>())).anchor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_alias_data_s),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_alias_data_s>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_alias_data_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_alias_data_s>())).mark as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_alias_data_s),
            "::",
            stringify!(mark)
        )
    );
}
pub type yaml_alias_data_t = yaml_alias_data_s;
#[repr(C)]
pub struct yaml_parser_s {
    pub error: yaml_error_type_t,
    pub problem: *const ::std::os::raw::c_char,
    pub problem_offset: usize,
    pub problem_value: ::std::os::raw::c_int,
    pub problem_mark: yaml_mark_t,
    pub context: *const ::std::os::raw::c_char,
    pub context_mark: yaml_mark_t,
    pub read_handler: yaml_read_handler_t,
    pub read_handler_data: *mut ::std::os::raw::c_void,
    pub input: yaml_parser_s__bindgen_ty_1,
    pub eof: ::std::os::raw::c_int,
    pub buffer: yaml_parser_s__bindgen_ty_2,
    pub unread: usize,
    pub raw_buffer: yaml_parser_s__bindgen_ty_3,
    pub encoding: yaml_encoding_t,
    pub offset: usize,
    pub mark: yaml_mark_t,
    pub stream_start_produced: ::std::os::raw::c_int,
    pub stream_end_produced: ::std::os::raw::c_int,
    pub flow_level: ::std::os::raw::c_int,
    pub tokens: yaml_parser_s__bindgen_ty_4,
    pub tokens_parsed: usize,
    pub token_available: ::std::os::raw::c_int,
    pub indents: yaml_parser_s__bindgen_ty_5,
    pub indent: ::std::os::raw::c_int,
    pub simple_key_allowed: ::std::os::raw::c_int,
    pub simple_keys: yaml_parser_s__bindgen_ty_6,
    pub states: yaml_parser_s__bindgen_ty_7,
    pub state: yaml_parser_state_t,
    pub marks: yaml_parser_s__bindgen_ty_8,
    pub tag_directives: yaml_parser_s__bindgen_ty_9,
    pub aliases: yaml_parser_s__bindgen_ty_10,
    pub document: *mut yaml_document_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yaml_parser_s__bindgen_ty_1 {
    pub string: yaml_parser_s__bindgen_ty_1__bindgen_ty_1,
    pub file: *mut FILE,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_1__bindgen_ty_1 {
    pub start: *const ::std::os::raw::c_uchar,
    pub end: *const ::std::os::raw::c_uchar,
    pub current: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_parser_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_parser_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_1__bindgen_ty_1>())).start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_1__bindgen_ty_1>())).end as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_1__bindgen_ty_1>())).current
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(current)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_1>())).file as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_1),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_2 {
    pub start: *mut yaml_char_t,
    pub end: *mut yaml_char_t,
    pub pointer: *mut yaml_char_t,
    pub last: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_2>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_2>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_2>())).pointer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_2),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_2>())).last as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_2),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_3 {
    pub start: *mut ::std::os::raw::c_uchar,
    pub end: *mut ::std::os::raw::c_uchar,
    pub pointer: *mut ::std::os::raw::c_uchar,
    pub last: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_3>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_3),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_3>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_3),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_3>())).pointer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_3),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_3>())).last as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_3),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_4 {
    pub start: *mut yaml_token_t,
    pub end: *mut yaml_token_t,
    pub head: *mut yaml_token_t,
    pub tail: *mut yaml_token_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_4>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_4),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_4>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_4),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_4>())).head as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_4),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_4>())).tail as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_4),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_5 {
    pub start: *mut ::std::os::raw::c_int,
    pub end: *mut ::std::os::raw::c_int,
    pub top: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_5>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_5))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_5>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_5),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_5>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_5),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_5>())).top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_5),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_6 {
    pub start: *mut yaml_simple_key_t,
    pub end: *mut yaml_simple_key_t,
    pub top: *mut yaml_simple_key_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_6>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_6))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_6>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_6),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_6>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_6),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_6>())).top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_6),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_7 {
    pub start: *mut yaml_parser_state_t,
    pub end: *mut yaml_parser_state_t,
    pub top: *mut yaml_parser_state_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_7>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_7))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_7>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_7),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_7>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_7),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_7>())).top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_7),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_8 {
    pub start: *mut yaml_mark_t,
    pub end: *mut yaml_mark_t,
    pub top: *mut yaml_mark_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_8>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_8>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_8))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_8>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_8),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_8>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_8),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_8>())).top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_8),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_9 {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
    pub top: *mut yaml_tag_directive_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_9>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_9>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_9))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_9>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_9),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_9>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_9),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_9>())).top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_9),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_10 {
    pub start: *mut yaml_alias_data_t,
    pub end: *mut yaml_alias_data_t,
    pub top: *mut yaml_alias_data_t,
}
#[test]
fn bindgen_test_layout_yaml_parser_s__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s__bindgen_ty_10>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_parser_s__bindgen_ty_10))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s__bindgen_ty_10>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s__bindgen_ty_10))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_10>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_10),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_10>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_10),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s__bindgen_ty_10>())).top as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s__bindgen_ty_10),
            "::",
            stringify!(top)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_parser_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_parser_s>(),
        480usize,
        concat!("Size of: ", stringify!(yaml_parser_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_parser_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_parser_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).problem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(problem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).problem_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(problem_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).problem_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(problem_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).problem_mark as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(problem_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).context as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).context_mark as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(context_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).read_handler as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(read_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).read_handler_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(read_handler_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).input as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).eof as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).buffer as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).unread as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(unread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).raw_buffer as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(raw_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).encoding as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).offset as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).mark as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s>())).stream_start_produced as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(stream_start_produced)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s>())).stream_end_produced as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(stream_end_produced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).flow_level as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(flow_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).tokens as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).tokens_parsed as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(tokens_parsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).token_available as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(token_available)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).indents as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(indents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).indent as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(indent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_parser_s>())).simple_key_allowed as *const _ as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(simple_key_allowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).simple_keys as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(simple_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).states as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).state as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).marks as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(marks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).tag_directives as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(tag_directives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).aliases as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_parser_s>())).document as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_parser_s),
            "::",
            stringify!(document)
        )
    );
}
pub type yaml_parser_t = yaml_parser_s;
extern "C" {
    pub fn yaml_parser_initialize(parser: *mut yaml_parser_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_parser_delete(parser: *mut yaml_parser_t);
}
extern "C" {
    pub fn yaml_parser_set_input_string(
        parser: *mut yaml_parser_t,
        input: *const ::std::os::raw::c_uchar,
        size: usize,
    );
}
extern "C" {
    pub fn yaml_parser_set_input_file(parser: *mut yaml_parser_t, file: *mut FILE);
}
extern "C" {
    pub fn yaml_parser_set_input(
        parser: *mut yaml_parser_t,
        handler: yaml_read_handler_t,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yaml_parser_set_encoding(parser: *mut yaml_parser_t, encoding: yaml_encoding_t);
}
extern "C" {
    pub fn yaml_parser_scan(
        parser: *mut yaml_parser_t,
        token: *mut yaml_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_parser_parse(
        parser: *mut yaml_parser_t,
        event: *mut yaml_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_parser_load(
        parser: *mut yaml_parser_t,
        document: *mut yaml_document_t,
    ) -> ::std::os::raw::c_int;
}
pub type yaml_write_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub const YAML_EMIT_STREAM_START_STATE: yaml_emitter_state_e = 0;
pub const YAML_EMIT_FIRST_DOCUMENT_START_STATE: yaml_emitter_state_e = 1;
pub const YAML_EMIT_DOCUMENT_START_STATE: yaml_emitter_state_e = 2;
pub const YAML_EMIT_DOCUMENT_CONTENT_STATE: yaml_emitter_state_e = 3;
pub const YAML_EMIT_DOCUMENT_END_STATE: yaml_emitter_state_e = 4;
pub const YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE: yaml_emitter_state_e = 5;
pub const YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE: yaml_emitter_state_e = 6;
pub const YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE: yaml_emitter_state_e = 7;
pub const YAML_EMIT_FLOW_MAPPING_KEY_STATE: yaml_emitter_state_e = 8;
pub const YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE: yaml_emitter_state_e = 9;
pub const YAML_EMIT_FLOW_MAPPING_VALUE_STATE: yaml_emitter_state_e = 10;
pub const YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE: yaml_emitter_state_e = 11;
pub const YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE: yaml_emitter_state_e = 12;
pub const YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE: yaml_emitter_state_e = 13;
pub const YAML_EMIT_BLOCK_MAPPING_KEY_STATE: yaml_emitter_state_e = 14;
pub const YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE: yaml_emitter_state_e = 15;
pub const YAML_EMIT_BLOCK_MAPPING_VALUE_STATE: yaml_emitter_state_e = 16;
pub const YAML_EMIT_END_STATE: yaml_emitter_state_e = 17;
pub type yaml_emitter_state_e = i32;
pub use self::yaml_emitter_state_e as yaml_emitter_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_anchors_s {
    pub references: ::std::os::raw::c_int,
    pub anchor: ::std::os::raw::c_int,
    pub serialized: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_anchors_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_anchors_s>(),
        12usize,
        concat!("Size of: ", stringify!(yaml_anchors_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_anchors_s>(),
        4usize,
        concat!("Alignment of ", stringify!(yaml_anchors_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_anchors_s>())).references as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_anchors_s),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_anchors_s>())).anchor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_anchors_s),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_anchors_s>())).serialized as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_anchors_s),
            "::",
            stringify!(serialized)
        )
    );
}
pub type yaml_anchors_t = yaml_anchors_s;
#[repr(C)]
pub struct yaml_emitter_s {
    pub error: yaml_error_type_t,
    pub problem: *const ::std::os::raw::c_char,
    pub write_handler: yaml_write_handler_t,
    pub write_handler_data: *mut ::std::os::raw::c_void,
    pub output: yaml_emitter_s__bindgen_ty_1,
    pub buffer: yaml_emitter_s__bindgen_ty_2,
    pub raw_buffer: yaml_emitter_s__bindgen_ty_3,
    pub encoding: yaml_encoding_t,
    pub canonical: ::std::os::raw::c_int,
    pub best_indent: ::std::os::raw::c_int,
    pub best_width: ::std::os::raw::c_int,
    pub unicode: ::std::os::raw::c_int,
    pub line_break: yaml_break_t,
    pub states: yaml_emitter_s__bindgen_ty_4,
    pub state: yaml_emitter_state_t,
    pub events: yaml_emitter_s__bindgen_ty_5,
    pub indents: yaml_emitter_s__bindgen_ty_6,
    pub tag_directives: yaml_emitter_s__bindgen_ty_7,
    pub indent: ::std::os::raw::c_int,
    pub flow_level: ::std::os::raw::c_int,
    pub root_context: ::std::os::raw::c_int,
    pub sequence_context: ::std::os::raw::c_int,
    pub mapping_context: ::std::os::raw::c_int,
    pub simple_key_context: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub whitespace: ::std::os::raw::c_int,
    pub indention: ::std::os::raw::c_int,
    pub open_ended: ::std::os::raw::c_int,
    pub anchor_data: yaml_emitter_s__bindgen_ty_8,
    pub tag_data: yaml_emitter_s__bindgen_ty_9,
    pub scalar_data: yaml_emitter_s__bindgen_ty_10,
    pub opened: ::std::os::raw::c_int,
    pub closed: ::std::os::raw::c_int,
    pub anchors: *mut yaml_anchors_t,
    pub last_anchor_id: ::std::os::raw::c_int,
    pub document: *mut yaml_document_t,
}
#[repr(C)]
pub struct yaml_emitter_s__bindgen_ty_1 {
    pub string: __BindgenUnionField<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>,
    pub file: __BindgenUnionField<*mut FILE>,
    pub bindgen_union_field: [u64; 3usize],
}
#[repr(C)]
pub struct yaml_emitter_s__bindgen_ty_1__bindgen_ty_1 {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub size: usize,
    pub size_written: *mut usize,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(yaml_emitter_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(yaml_emitter_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>())).buffer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>())).size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_1__bindgen_ty_1>())).size_written
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size_written)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_1>())).file as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_1),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_2 {
    pub start: *mut yaml_char_t,
    pub end: *mut yaml_char_t,
    pub pointer: *mut yaml_char_t,
    pub last: *mut yaml_char_t,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_2>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_2>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_2>())).pointer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_2),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_2>())).last as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_2),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_3 {
    pub start: *mut ::std::os::raw::c_uchar,
    pub end: *mut ::std::os::raw::c_uchar,
    pub pointer: *mut ::std::os::raw::c_uchar,
    pub last: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_3>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_3),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_3>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_3),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_3>())).pointer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_3),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_3>())).last as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_3),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_4 {
    pub start: *mut yaml_emitter_state_t,
    pub end: *mut yaml_emitter_state_t,
    pub top: *mut yaml_emitter_state_t,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_4>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_4),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_4>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_4),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_4>())).top as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_4),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_5 {
    pub start: *mut yaml_event_t,
    pub end: *mut yaml_event_t,
    pub head: *mut yaml_event_t,
    pub tail: *mut yaml_event_t,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_5))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_5>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_5),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_5>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_5),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_5>())).head as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_5),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_5>())).tail as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_5),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_6 {
    pub start: *mut ::std::os::raw::c_int,
    pub end: *mut ::std::os::raw::c_int,
    pub top: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_6>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_6))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_6>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_6),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_6>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_6),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_6>())).top as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_6),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_emitter_s__bindgen_ty_7 {
    pub start: *mut yaml_tag_directive_t,
    pub end: *mut yaml_tag_directive_t,
    pub top: *mut yaml_tag_directive_t,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_7>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_7))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_7>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_7),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_7>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_7),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_7>())).top as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_7),
            "::",
            stringify!(top)
        )
    );
}
#[repr(C)]
pub struct yaml_emitter_s__bindgen_ty_8 {
    pub anchor: *mut yaml_char_t,
    pub anchor_length: usize,
    pub alias: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_8>(),
        24usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_8>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_8))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_8>())).anchor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_8),
            "::",
            stringify!(anchor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_8>())).anchor_length as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_8),
            "::",
            stringify!(anchor_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_8>())).alias as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_8),
            "::",
            stringify!(alias)
        )
    );
}
#[repr(C)]
pub struct yaml_emitter_s__bindgen_ty_9 {
    pub handle: *mut yaml_char_t,
    pub handle_length: usize,
    pub suffix: *mut yaml_char_t,
    pub suffix_length: usize,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_9>(),
        32usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_9>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_9))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_9>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_9),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_9>())).handle_length as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_9),
            "::",
            stringify!(handle_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_9>())).suffix as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_9),
            "::",
            stringify!(suffix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_9>())).suffix_length as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_9),
            "::",
            stringify!(suffix_length)
        )
    );
}
#[repr(C)]
pub struct yaml_emitter_s__bindgen_ty_10 {
    pub value: *mut yaml_char_t,
    pub length: usize,
    pub multiline: ::std::os::raw::c_int,
    pub flow_plain_allowed: ::std::os::raw::c_int,
    pub block_plain_allowed: ::std::os::raw::c_int,
    pub single_quoted_allowed: ::std::os::raw::c_int,
    pub block_allowed: ::std::os::raw::c_int,
    pub style: yaml_scalar_style_t,
}
#[test]
fn bindgen_test_layout_yaml_emitter_s__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s__bindgen_ty_10>(),
        40usize,
        concat!("Size of: ", stringify!(yaml_emitter_s__bindgen_ty_10))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s__bindgen_ty_10>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s__bindgen_ty_10))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).multiline as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(multiline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).flow_plain_allowed as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(flow_plain_allowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).block_plain_allowed
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(block_plain_allowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).single_quoted_allowed
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(single_quoted_allowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).block_allowed as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(block_allowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s__bindgen_ty_10>())).style as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s__bindgen_ty_10),
            "::",
            stringify!(style)
        )
    );
}
#[test]
fn bindgen_test_layout_yaml_emitter_s() {
    assert_eq!(
        ::std::mem::size_of::<yaml_emitter_s>(),
        432usize,
        concat!("Size of: ", stringify!(yaml_emitter_s))
    );
    assert_eq!(
        ::std::mem::align_of::<yaml_emitter_s>(),
        8usize,
        concat!("Alignment of ", stringify!(yaml_emitter_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).problem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(problem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).write_handler as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(write_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s>())).write_handler_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(write_handler_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).output as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).buffer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).raw_buffer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(raw_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).encoding as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).canonical as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(canonical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).best_indent as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(best_indent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).best_width as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(best_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).unicode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).line_break as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(line_break)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).states as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).state as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).events as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).indents as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(indents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).tag_directives as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(tag_directives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).indent as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(indent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).flow_level as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(flow_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).root_context as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(root_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).sequence_context as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(sequence_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).mapping_context as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(mapping_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<yaml_emitter_s>())).simple_key_context as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(simple_key_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).line as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).column as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).whitespace as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(whitespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).indention as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(indention)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).open_ended as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(open_ended)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).anchor_data as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(anchor_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).tag_data as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(tag_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).scalar_data as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(scalar_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).opened as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(opened)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).closed as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(closed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).anchors as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(anchors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).last_anchor_id as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(last_anchor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yaml_emitter_s>())).document as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(yaml_emitter_s),
            "::",
            stringify!(document)
        )
    );
}
pub type yaml_emitter_t = yaml_emitter_s;
extern "C" {
    pub fn yaml_emitter_initialize(emitter: *mut yaml_emitter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_emitter_delete(emitter: *mut yaml_emitter_t);
}
extern "C" {
    pub fn yaml_emitter_set_output_string(
        emitter: *mut yaml_emitter_t,
        output: *mut ::std::os::raw::c_uchar,
        size: usize,
        size_written: *mut usize,
    );
}
extern "C" {
    pub fn yaml_emitter_set_output_file(emitter: *mut yaml_emitter_t, file: *mut FILE);
}
extern "C" {
    pub fn yaml_emitter_set_output(
        emitter: *mut yaml_emitter_t,
        handler: yaml_write_handler_t,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yaml_emitter_set_encoding(emitter: *mut yaml_emitter_t, encoding: yaml_encoding_t);
}
extern "C" {
    pub fn yaml_emitter_set_canonical(
        emitter: *mut yaml_emitter_t,
        canonical: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn yaml_emitter_set_indent(emitter: *mut yaml_emitter_t, indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yaml_emitter_set_width(emitter: *mut yaml_emitter_t, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yaml_emitter_set_unicode(emitter: *mut yaml_emitter_t, unicode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yaml_emitter_set_break(emitter: *mut yaml_emitter_t, line_break: yaml_break_t);
}
extern "C" {
    pub fn yaml_emitter_emit(
        emitter: *mut yaml_emitter_t,
        event: *mut yaml_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_emitter_open(emitter: *mut yaml_emitter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_emitter_close(emitter: *mut yaml_emitter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_emitter_dump(
        emitter: *mut yaml_emitter_t,
        document: *mut yaml_document_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yaml_emitter_flush(emitter: *mut yaml_emitter_t) -> ::std::os::raw::c_int;
}
